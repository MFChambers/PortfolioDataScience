{
  "cells": [
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "from lets_plot import *\n",
        "\n",
        "# Setup lets-plot\n",
        "LetsPlot.setup_html()\n",
        "\n",
        "# Load dataset\n",
        "names = pd.read_csv(\"names_year.csv\")\n",
        "\n",
        "# Filter for John\n",
        "john = names[names[\"name\"] == \"John\"]\n",
        "\n",
        "# Melt to long format\n",
        "john_long = john.melt(id_vars=[\"name\", \"year\"], var_name=\"state\", value_name=\"number\")\n",
        "\n",
        "# Clean: convert number to numeric and drop NaNs\n",
        "john_long[\"number\"] = pd.to_numeric(john_long[\"number\"], errors=\"coerce\")\n",
        "john_long = john_long.dropna(subset=[\"number\"])\n",
        "\n",
        "# Filter for UT and OR\n",
        "john_ut_or = john_long[john_long[\"state\"].isin([\"UT\", \"OR\"])]\n",
        "john_ut_or[\"state\"] = john_ut_or[\"state\"].astype(\"category\")\n",
        "\n",
        "# Define vertical lines\n",
        "vlines = [1936, 1976, 1999]\n",
        "\n",
        "# Create labels for vertical lines\n",
        "labels_df = john_ut_or[john_ut_or[\"year\"].isin(vlines)].groupby(\"year\", as_index=False)[\"number\"].max()\n",
        "labels_df[\"label\"] = labels_df[\"year\"].astype(str)\n",
        "\n",
        "# Plot\n",
        "plot = (\n",
        "    ggplot(john_ut_or, aes(x=\"year\", y=\"number\", color=\"state\")) +\n",
        "    geom_line(size=1.2) +\n",
        "    geom_vline(xintercept=vlines, linetype=\"dashed\", color=\"gray\") +\n",
        "    geom_text(data=labels_df, mapping=aes(x=\"year\", y=\"number\", label=\"label\"), color=\"gray\") +\n",
        "    ggtitle(\"The history of John for Utah (red) and Oregon (orange)\") +\n",
        "    xlab(\"Year name given\") +\n",
        "    ylab(\"Count of John\") +\n",
        "    scale_color_manual(values={\"UT\": \"red\", \"OR\": \"orange\"}) +\n",
        "    theme_minimal()\n",
        ")\n",
        "\n",
        "plot"
      ],
      "id": "4a15f6ac",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Q2\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "problem = pd.Series([np.nan, 18, 22, 45, 31, np.nan, 85, 38, 129, 8000, 22, 2])\n",
        "\n",
        "# Step 1: Calculate std (excluding NaNs)\n",
        "std_val = problem.std()\n",
        "\n",
        "# Step 2: Replace NaNs with std\n",
        "filled = problem.fillna(std_val)\n",
        "\n",
        "# Step 3: Calculate mean\n",
        "mean_val = round(filled.mean(), 2)\n",
        "mean_val"
      ],
      "id": "36a19167",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Q3\n",
        "import pandas as pd\n",
        "from lets_plot import *\n",
        "\n",
        "LetsPlot.setup_html()\n",
        "\n",
        "# Original age ranges\n",
        "ages = pd.Series([\"10-25\", \"10-25\", \"26-35\", \"56-85\", \"0-9\", \"46-55\",\n",
        "                  \"56-85\", \"0-9\", \"26-35\", \"56-85\", \"0-9\", \"10-25\"])\n",
        "\n",
        "# Split into two columns and calculate midpoint\n",
        "split_ages = ages.str.split(\"-\", expand=True).astype(int)\n",
        "split_ages.columns = [\"low\", \"high\"]\n",
        "split_ages[\"mid\"] = split_ages.mean(axis=1)\n",
        "\n",
        "# Make histogram\n",
        "ggplot(split_ages, aes(x=\"mid\")) + \\\n",
        "    geom_histogram(binwidth=10, color=\"black\", fill=\"skyblue\") + \\\n",
        "    ggtitle(\"Age Distribution\") + \\\n",
        "    xlab(\"Midpoint of Age Range\") + \\\n",
        "    ylab(\"Frequency\") + \\\n",
        "    theme_minimal()"
      ],
      "id": "83077e10",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt  # <- missing import for bar plot\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "from lets_plot import *\n",
        "\n",
        "LetsPlot.setup_html()\n",
        "\n",
        "# Load cleaned dataset\n",
        "star = pd.read_csv(\"StarWars_cleaned.csv\")\n",
        "\n",
        "# Drop missing rows\n",
        "star = star.dropna()\n",
        "\n",
        "# Separate features and target\n",
        "X = star.drop(columns=[\"Gender\"])\n",
        "y = star[\"Gender\"]\n",
        "\n",
        "# Split data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=2022)\n",
        "\n",
        "# Train model\n",
        "model = RandomForestClassifier()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Predict and evaluate\n",
        "preds = model.predict(X_test)\n",
        "acc = accuracy_score(y_test, preds)\n",
        "print(\"Accuracy:\", round(acc, 2))\n",
        "\n",
        "# Feature importance plot\n",
        "importances = pd.Series(model.feature_importances_, index=X.columns)\n",
        "top10 = importances.sort_values(ascending=False).head(10)\n",
        "\n",
        "# Plot using matplotlib\n",
        "top10.plot(kind=\"barh\", title=\"Top 10 Important Features\", figsize=(8, 6))\n",
        "plt.xlabel(\"Importance\")\n",
        "plt.gca().invert_yaxis()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "21c29a3c",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Library/Frameworks/Python.framework/Versions/3.13/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}